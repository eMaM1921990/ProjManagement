/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.pm.app.dal.dao;

import com.pm.app.dal.dto.*;
import com.pm.app.dal.exceptions.*;

public interface TaskManagementDao
{
	/** 
	 * Inserts a new row in the task_management table.
	 */
	public TaskManagementPk insert(TaskManagement dto) throws TaskManagementDaoException;

	/** 
	 * Updates a single row in the task_management table.
	 */
	public void update(TaskManagementPk pk, TaskManagement dto) throws TaskManagementDaoException;

	/** 
	 * Deletes a single row in the task_management table.
	 */
	public void delete(TaskManagementPk pk) throws TaskManagementDaoException;

	/** 
	 * Returns the rows from the task_management table that matches the specified primary-key value.
	 */
	public TaskManagement findByPrimaryKey(TaskManagementPk pk) throws TaskManagementDaoException;

	/** 
	 * Returns all rows from the task_management table that match the criteria 'idtask_management = :idtaskManagement'.
	 */
	public TaskManagement findByPrimaryKey(int idtaskManagement) throws TaskManagementDaoException;

	/** 
	 * Returns all rows from the task_management table that match the criteria ''.
	 */
	public TaskManagement[] findAll() throws TaskManagementDaoException;

	/** 
	 * Returns all rows from the task_management table that match the criteria 'business_partnet_id = :businessPartnetId'.
	 */
	public TaskManagement[] findByBusinessPartner(int businessPartnetId) throws TaskManagementDaoException;

	/** 
	 * Returns all rows from the task_management table that match the criteria 'task_id = :taskId'.
	 */
	public TaskManagement[] findByTasks(int taskId) throws TaskManagementDaoException;

	/** 
	 * Returns all rows from the task_management table that match the criteria 'idtask_management = :idtaskManagement'.
	 */
	public TaskManagement[] findWhereIdtaskManagementEquals(int idtaskManagement) throws TaskManagementDaoException;

	/** 
	 * Returns all rows from the task_management table that match the criteria 'task_id = :taskId'.
	 */
	public TaskManagement[] findWhereTaskIdEquals(int taskId) throws TaskManagementDaoException;

	/** 
	 * Returns all rows from the task_management table that match the criteria 'business_partnet_id = :businessPartnetId'.
	 */
	public TaskManagement[] findWhereBusinessPartnetIdEquals(int businessPartnetId) throws TaskManagementDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the task_management table that match the specified arbitrary SQL statement
	 */
	public TaskManagement[] findByDynamicSelect(String sql, Object[] sqlParams) throws TaskManagementDaoException;

	/** 
	 * Returns all rows from the task_management table that match the specified arbitrary SQL statement
	 */
	public TaskManagement[] findByDynamicWhere(String sql, Object[] sqlParams) throws TaskManagementDaoException;

}
