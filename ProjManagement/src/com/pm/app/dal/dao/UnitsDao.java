/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.pm.app.dal.dao;

import com.pm.app.dal.dto.*;
import com.pm.app.dal.exceptions.*;

public interface UnitsDao
{
	/** 
	 * Inserts a new row in the units table.
	 */
	public UnitsPk insert(Units dto) throws UnitsDaoException;

	/** 
	 * Updates a single row in the units table.
	 */
	public void update(UnitsPk pk, Units dto) throws UnitsDaoException;

	/** 
	 * Deletes a single row in the units table.
	 */
	public void delete(UnitsPk pk) throws UnitsDaoException;

	/** 
	 * Returns the rows from the units table that matches the specified primary-key value.
	 */
	public Units findByPrimaryKey(UnitsPk pk) throws UnitsDaoException;

	/** 
	 * Returns all rows from the units table that match the criteria 'idunits = :idunits'.
	 */
	public Units findByPrimaryKey(int idunits) throws UnitsDaoException;

	/** 
	 * Returns all rows from the units table that match the criteria ''.
	 */
	public Units[] findAll() throws UnitsDaoException;

	/** 
	 * Returns all rows from the units table that match the criteria 'branch_id = :branchId'.
	 */
	public Units[] findByBranches(int branchId) throws UnitsDaoException;

	/** 
	 * Returns all rows from the units table that match the criteria 'idunits = :idunits'.
	 */
	public Units[] findWhereIdunitsEquals(int idunits) throws UnitsDaoException;

	/** 
	 * Returns all rows from the units table that match the criteria 'name = :name'.
	 */
	public Units[] findWhereNameEquals(String name) throws UnitsDaoException;

	/** 
	 * Returns all rows from the units table that match the criteria 'conversion_rate = :conversionRate'.
	 */
	public Units[] findWhereConversionRateEquals(double conversionRate) throws UnitsDaoException;

	/** 
	 * Returns all rows from the units table that match the criteria 'branch_id = :branchId'.
	 */
	public Units[] findWhereBranchIdEquals(int branchId) throws UnitsDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the units table that match the specified arbitrary SQL statement
	 */
	public Units[] findByDynamicSelect(String sql, Object[] sqlParams) throws UnitsDaoException;

	/** 
	 * Returns all rows from the units table that match the specified arbitrary SQL statement
	 */
	public Units[] findByDynamicWhere(String sql, Object[] sqlParams) throws UnitsDaoException;

}
