/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.pm.app.dal.dao;

import com.pm.app.dal.dto.*;
import com.pm.app.dal.exceptions.*;

public interface BpViewDao
{
	/** 
	 * Returns all rows from the bp_view table that match the criteria ''.
	 */
	public BpView[] findAll() throws BpViewDaoException;

	/** 
	 * Returns all rows from the bp_view table that match the criteria 'idbusiness_partner = :idbusinessPartner'.
	 */
	public BpView[] findWhereIdbusinessPartnerEquals(int idbusinessPartner) throws BpViewDaoException;

	/** 
	 * Returns all rows from the bp_view table that match the criteria 'name = :name'.
	 */
	public BpView[] findWhereNameEquals(String name) throws BpViewDaoException;

	/** 
	 * Returns all rows from the bp_view table that match the criteria 'address = :address'.
	 */
	public BpView[] findWhereAddressEquals(String address) throws BpViewDaoException;

	/** 
	 * Returns all rows from the bp_view table that match the criteria 'phone = :phone'.
	 */
	public BpView[] findWherePhoneEquals(String phone) throws BpViewDaoException;

	/** 
	 * Returns all rows from the bp_view table that match the criteria 'working_as = :workingAs'.
	 */
	public BpView[] findWhereWorkingAsEquals(int workingAs) throws BpViewDaoException;

	/** 
	 * Returns all rows from the bp_view table that match the criteria 'branch_id = :branchId'.
	 */
	public BpView[] findWhereBranchIdEquals(int branchId) throws BpViewDaoException;

	/** 
	 * Returns all rows from the bp_view table that match the criteria 'idbusiness_partner_type = :idbusinessPartnerType'.
	 */
	public BpView[] findWhereIdbusinessPartnerTypeEquals(int idbusinessPartnerType) throws BpViewDaoException;

	/** 
	 * Returns all rows from the bp_view table that match the criteria 'type = :type'.
	 */
	public BpView[] findWhereTypeEquals(String type) throws BpViewDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the bp_view table that match the specified arbitrary SQL statement
	 */
	public BpView[] findByDynamicSelect(String sql, Object[] sqlParams) throws BpViewDaoException;

	/** 
	 * Returns all rows from the bp_view table that match the specified arbitrary SQL statement
	 */
	public BpView[] findByDynamicWhere(String sql, Object[] sqlParams) throws BpViewDaoException;

}
