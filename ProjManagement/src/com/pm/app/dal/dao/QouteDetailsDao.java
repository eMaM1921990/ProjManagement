/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.pm.app.dal.dao;

import com.pm.app.dal.dto.*;
import com.pm.app.dal.exceptions.*;

public interface QouteDetailsDao
{
	/** 
	 * Inserts a new row in the qoute_details table.
	 */
	public QouteDetailsPk insert(QouteDetails dto) throws QouteDetailsDaoException;

	/** 
	 * Updates a single row in the qoute_details table.
	 */
	public void update(QouteDetailsPk pk, QouteDetails dto) throws QouteDetailsDaoException;

	/** 
	 * Deletes a single row in the qoute_details table.
	 */
	public void delete(QouteDetailsPk pk) throws QouteDetailsDaoException;

	/** 
	 * Returns the rows from the qoute_details table that matches the specified primary-key value.
	 */
	public QouteDetails findByPrimaryKey(QouteDetailsPk pk) throws QouteDetailsDaoException;

	/** 
	 * Returns all rows from the qoute_details table that match the criteria 'idqoute_details = :idqouteDetails'.
	 */
	public QouteDetails findByPrimaryKey(int idqouteDetails) throws QouteDetailsDaoException;

	/** 
	 * Returns all rows from the qoute_details table that match the criteria ''.
	 */
	public QouteDetails[] findAll() throws QouteDetailsDaoException;

	/** 
	 * Returns all rows from the qoute_details table that match the criteria 'item_id = :itemId'.
	 */
	public QouteDetails[] findByItems(int itemId) throws QouteDetailsDaoException;

	/** 
	 * Returns all rows from the qoute_details table that match the criteria 'quote_id = :quoteId'.
	 */
	public QouteDetails[] findByQuotes(int quoteId) throws QouteDetailsDaoException;

	/** 
	 * Returns all rows from the qoute_details table that match the criteria 'unit_id = :unitId'.
	 */
	public QouteDetails[] findByUnits(int unitId) throws QouteDetailsDaoException;

	/** 
	 * Returns all rows from the qoute_details table that match the criteria 'idqoute_details = :idqouteDetails'.
	 */
	public QouteDetails[] findWhereIdqouteDetailsEquals(int idqouteDetails) throws QouteDetailsDaoException;

	/** 
	 * Returns all rows from the qoute_details table that match the criteria 'quote_id = :quoteId'.
	 */
	public QouteDetails[] findWhereQuoteIdEquals(int quoteId) throws QouteDetailsDaoException;

	/** 
	 * Returns all rows from the qoute_details table that match the criteria 'item_id = :itemId'.
	 */
	public QouteDetails[] findWhereItemIdEquals(int itemId) throws QouteDetailsDaoException;

	/** 
	 * Returns all rows from the qoute_details table that match the criteria 'unit_id = :unitId'.
	 */
	public QouteDetails[] findWhereUnitIdEquals(int unitId) throws QouteDetailsDaoException;

	/** 
	 * Returns all rows from the qoute_details table that match the criteria 'price = :price'.
	 */
	public QouteDetails[] findWherePriceEquals(double price) throws QouteDetailsDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the qoute_details table that match the specified arbitrary SQL statement
	 */
	public QouteDetails[] findByDynamicSelect(String sql, Object[] sqlParams) throws QouteDetailsDaoException;

	/** 
	 * Returns all rows from the qoute_details table that match the specified arbitrary SQL statement
	 */
	public QouteDetails[] findByDynamicWhere(String sql, Object[] sqlParams) throws QouteDetailsDaoException;

}
