/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.pm.app.dal.dao;

import com.pm.app.dal.dto.*;
import com.pm.app.dal.exceptions.*;

public interface WorkingStatusDao
{
	/** 
	 * Inserts a new row in the working_status table.
	 */
	public WorkingStatusPk insert(WorkingStatus dto) throws WorkingStatusDaoException;

	/** 
	 * Updates a single row in the working_status table.
	 */
	public void update(WorkingStatusPk pk, WorkingStatus dto) throws WorkingStatusDaoException;

	/** 
	 * Deletes a single row in the working_status table.
	 */
	public void delete(WorkingStatusPk pk) throws WorkingStatusDaoException;

	/** 
	 * Returns the rows from the working_status table that matches the specified primary-key value.
	 */
	public WorkingStatus findByPrimaryKey(WorkingStatusPk pk) throws WorkingStatusDaoException;

	/** 
	 * Returns all rows from the working_status table that match the criteria 'idworking_stat = :idworkingStat'.
	 */
	public WorkingStatus findByPrimaryKey(int idworkingStat) throws WorkingStatusDaoException;

	/** 
	 * Returns all rows from the working_status table that match the criteria ''.
	 */
	public WorkingStatus[] findAll() throws WorkingStatusDaoException;

	/** 
	 * Returns all rows from the working_status table that match the criteria 'branch_id = :branchId'.
	 */
	public WorkingStatus[] findByBranches(int branchId) throws WorkingStatusDaoException;

	/** 
	 * Returns all rows from the working_status table that match the criteria 'idworking_stat = :idworkingStat'.
	 */
	public WorkingStatus[] findWhereIdworkingStatEquals(int idworkingStat) throws WorkingStatusDaoException;

	/** 
	 * Returns all rows from the working_status table that match the criteria 'name = :name'.
	 */
	public WorkingStatus[] findWhereNameEquals(String name) throws WorkingStatusDaoException;

	/** 
	 * Returns all rows from the working_status table that match the criteria 'branch_id = :branchId'.
	 */
	public WorkingStatus[] findWhereBranchIdEquals(int branchId) throws WorkingStatusDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the working_status table that match the specified arbitrary SQL statement
	 */
	public WorkingStatus[] findByDynamicSelect(String sql, Object[] sqlParams) throws WorkingStatusDaoException;

	/** 
	 * Returns all rows from the working_status table that match the specified arbitrary SQL statement
	 */
	public WorkingStatus[] findByDynamicWhere(String sql, Object[] sqlParams) throws WorkingStatusDaoException;

}
