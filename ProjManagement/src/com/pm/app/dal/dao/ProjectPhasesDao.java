/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.pm.app.dal.dao;

import java.util.Date;
import com.pm.app.dal.dto.*;
import com.pm.app.dal.exceptions.*;

public interface ProjectPhasesDao
{
	/** 
	 * Inserts a new row in the project_phases table.
	 */
	public ProjectPhasesPk insert(ProjectPhases dto) throws ProjectPhasesDaoException;

	/** 
	 * Updates a single row in the project_phases table.
	 */
	public void update(ProjectPhasesPk pk, ProjectPhases dto) throws ProjectPhasesDaoException;

	/** 
	 * Deletes a single row in the project_phases table.
	 */
	public void delete(ProjectPhasesPk pk) throws ProjectPhasesDaoException;

	/** 
	 * Returns the rows from the project_phases table that matches the specified primary-key value.
	 */
	public ProjectPhases findByPrimaryKey(ProjectPhasesPk pk) throws ProjectPhasesDaoException;

	/** 
	 * Returns all rows from the project_phases table that match the criteria 'idproject_phases = :idprojectPhases'.
	 */
	public ProjectPhases findByPrimaryKey(int idprojectPhases) throws ProjectPhasesDaoException;

	/** 
	 * Returns all rows from the project_phases table that match the criteria ''.
	 */
	public ProjectPhases[] findAll() throws ProjectPhasesDaoException;

	/** 
	 * Returns all rows from the project_phases table that match the criteria 'project_id = :projectId'.
	 */
	public ProjectPhases[] findByProjects(int projectId) throws ProjectPhasesDaoException;

	/** 
	 * Returns all rows from the project_phases table that match the criteria 'status = :status'.
	 */
	public ProjectPhases[] findByWorkingStatus(int status) throws ProjectPhasesDaoException;

	/** 
	 * Returns all rows from the project_phases table that match the criteria 'idproject_phases = :idprojectPhases'.
	 */
	public ProjectPhases[] findWhereIdprojectPhasesEquals(int idprojectPhases) throws ProjectPhasesDaoException;

	/** 
	 * Returns all rows from the project_phases table that match the criteria 'name = :name'.
	 */
	public ProjectPhases[] findWhereNameEquals(String name) throws ProjectPhasesDaoException;

	/** 
	 * Returns all rows from the project_phases table that match the criteria 'description = :description'.
	 */
	public ProjectPhases[] findWhereDescriptionEquals(String description) throws ProjectPhasesDaoException;

	/** 
	 * Returns all rows from the project_phases table that match the criteria 'start_date = :startDate'.
	 */
	public ProjectPhases[] findWhereStartDateEquals(Date startDate) throws ProjectPhasesDaoException;

	/** 
	 * Returns all rows from the project_phases table that match the criteria 'end_date = :endDate'.
	 */
	public ProjectPhases[] findWhereEndDateEquals(Date endDate) throws ProjectPhasesDaoException;

	/** 
	 * Returns all rows from the project_phases table that match the criteria 'status = :status'.
	 */
	public ProjectPhases[] findWhereStatusEquals(int status) throws ProjectPhasesDaoException;

	/** 
	 * Returns all rows from the project_phases table that match the criteria 'project_id = :projectId'.
	 */
	public ProjectPhases[] findWhereProjectIdEquals(int projectId) throws ProjectPhasesDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the project_phases table that match the specified arbitrary SQL statement
	 */
	public ProjectPhases[] findByDynamicSelect(String sql, Object[] sqlParams) throws ProjectPhasesDaoException;

	/** 
	 * Returns all rows from the project_phases table that match the specified arbitrary SQL statement
	 */
	public ProjectPhases[] findByDynamicWhere(String sql, Object[] sqlParams) throws ProjectPhasesDaoException;

}
