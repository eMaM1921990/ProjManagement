/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.pm.app.dal.dao;

import com.pm.app.dal.dto.*;
import com.pm.app.dal.exceptions.*;

public interface BusinessPartnerDao
{
	/** 
	 * Inserts a new row in the business_partner table.
	 */
	public BusinessPartnerPk insert(BusinessPartner dto) throws BusinessPartnerDaoException;

	/** 
	 * Updates a single row in the business_partner table.
	 */
	public void update(BusinessPartnerPk pk, BusinessPartner dto) throws BusinessPartnerDaoException;

	/** 
	 * Deletes a single row in the business_partner table.
	 */
	public void delete(BusinessPartnerPk pk) throws BusinessPartnerDaoException;

	/** 
	 * Returns the rows from the business_partner table that matches the specified primary-key value.
	 */
	public BusinessPartner findByPrimaryKey(BusinessPartnerPk pk) throws BusinessPartnerDaoException;

	/** 
	 * Returns all rows from the business_partner table that match the criteria 'idbusiness_partner = :idbusinessPartner'.
	 */
	public BusinessPartner findByPrimaryKey(int idbusinessPartner) throws BusinessPartnerDaoException;

	/** 
	 * Returns all rows from the business_partner table that match the criteria ''.
	 */
	public BusinessPartner[] findAll() throws BusinessPartnerDaoException;

	/** 
	 * Returns all rows from the business_partner table that match the criteria 'branch_id = :branchId'.
	 */
	public BusinessPartner[] findByBranches(int branchId) throws BusinessPartnerDaoException;

	/** 
	 * Returns all rows from the business_partner table that match the criteria 'working_as = :workingAs'.
	 */
	public BusinessPartner[] findByBusinessPartnerType(int workingAs) throws BusinessPartnerDaoException;

	/** 
	 * Returns all rows from the business_partner table that match the criteria 'idbusiness_partner = :idbusinessPartner'.
	 */
	public BusinessPartner[] findWhereIdbusinessPartnerEquals(int idbusinessPartner) throws BusinessPartnerDaoException;

	/** 
	 * Returns all rows from the business_partner table that match the criteria 'name = :name'.
	 */
	public BusinessPartner[] findWhereNameEquals(String name) throws BusinessPartnerDaoException;

	/** 
	 * Returns all rows from the business_partner table that match the criteria 'address = :address'.
	 */
	public BusinessPartner[] findWhereAddressEquals(String address) throws BusinessPartnerDaoException;

	/** 
	 * Returns all rows from the business_partner table that match the criteria 'phone = :phone'.
	 */
	public BusinessPartner[] findWherePhoneEquals(String phone) throws BusinessPartnerDaoException;

	/** 
	 * Returns all rows from the business_partner table that match the criteria 'working_as = :workingAs'.
	 */
	public BusinessPartner[] findWhereWorkingAsEquals(int workingAs) throws BusinessPartnerDaoException;

	/** 
	 * Returns all rows from the business_partner table that match the criteria 'branch_id = :branchId'.
	 */
	public BusinessPartner[] findWhereBranchIdEquals(int branchId) throws BusinessPartnerDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the business_partner table that match the specified arbitrary SQL statement
	 */
	public BusinessPartner[] findByDynamicSelect(String sql, Object[] sqlParams) throws BusinessPartnerDaoException;

	/** 
	 * Returns all rows from the business_partner table that match the specified arbitrary SQL statement
	 */
	public BusinessPartner[] findByDynamicWhere(String sql, Object[] sqlParams) throws BusinessPartnerDaoException;

}
