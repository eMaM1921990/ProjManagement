/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.pm.app.dal.dao;

import com.pm.app.dal.dto.*;
import com.pm.app.dal.exceptions.*;

public interface ItemsDao
{
	/** 
	 * Inserts a new row in the items table.
	 */
	public ItemsPk insert(Items dto) throws ItemsDaoException;

	/** 
	 * Updates a single row in the items table.
	 */
	public void update(ItemsPk pk, Items dto) throws ItemsDaoException;

	/** 
	 * Deletes a single row in the items table.
	 */
	public void delete(ItemsPk pk) throws ItemsDaoException;

	/** 
	 * Returns the rows from the items table that matches the specified primary-key value.
	 */
	public Items findByPrimaryKey(ItemsPk pk) throws ItemsDaoException;

	/** 
	 * Returns all rows from the items table that match the criteria 'iditems = :iditems'.
	 */
	public Items findByPrimaryKey(int iditems) throws ItemsDaoException;

	/** 
	 * Returns all rows from the items table that match the criteria ''.
	 */
	public Items[] findAll() throws ItemsDaoException;

	/** 
	 * Returns all rows from the items table that match the criteria 'branch_id = :branchId'.
	 */
	public Items[] findByBranches(int branchId) throws ItemsDaoException;

	/** 
	 * Returns all rows from the items table that match the criteria 'category_id = :categoryId'.
	 */
	public Items[] findByItemsCategory(int categoryId) throws ItemsDaoException;

	/** 
	 * Returns all rows from the items table that match the criteria 'unit_id = :unitId'.
	 */
	public Items[] findByUnits(int unitId) throws ItemsDaoException;

	/** 
	 * Returns all rows from the items table that match the criteria 'iditems = :iditems'.
	 */
	public Items[] findWhereIditemsEquals(int iditems) throws ItemsDaoException;

	/** 
	 * Returns all rows from the items table that match the criteria 'name = :name'.
	 */
	public Items[] findWhereNameEquals(String name) throws ItemsDaoException;

	/** 
	 * Returns all rows from the items table that match the criteria 'quantity = :quantity'.
	 */
	public Items[] findWhereQuantityEquals(int quantity) throws ItemsDaoException;

	/** 
	 * Returns all rows from the items table that match the criteria 'unit_id = :unitId'.
	 */
	public Items[] findWhereUnitIdEquals(int unitId) throws ItemsDaoException;

	/** 
	 * Returns all rows from the items table that match the criteria 'branch_id = :branchId'.
	 */
	public Items[] findWhereBranchIdEquals(int branchId) throws ItemsDaoException;

	/** 
	 * Returns all rows from the items table that match the criteria 'category_id = :categoryId'.
	 */
	public Items[] findWhereCategoryIdEquals(int categoryId) throws ItemsDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the items table that match the specified arbitrary SQL statement
	 */
	public Items[] findByDynamicSelect(String sql, Object[] sqlParams) throws ItemsDaoException;

	/** 
	 * Returns all rows from the items table that match the specified arbitrary SQL statement
	 */
	public Items[] findByDynamicWhere(String sql, Object[] sqlParams) throws ItemsDaoException;

}
