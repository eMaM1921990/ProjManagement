/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.pm.app.dal.dao;

import java.util.Date;
import com.pm.app.dal.dto.*;
import com.pm.app.dal.exceptions.*;

public interface ProjectsDao
{
	/** 
	 * Inserts a new row in the projects table.
	 */
	public ProjectsPk insert(Projects dto) throws ProjectsDaoException;

	/** 
	 * Updates a single row in the projects table.
	 */
	public void update(ProjectsPk pk, Projects dto) throws ProjectsDaoException;

	/** 
	 * Deletes a single row in the projects table.
	 */
	public void delete(ProjectsPk pk) throws ProjectsDaoException;

	/** 
	 * Returns the rows from the projects table that matches the specified primary-key value.
	 */
	public Projects findByPrimaryKey(ProjectsPk pk) throws ProjectsDaoException;

	/** 
	 * Returns all rows from the projects table that match the criteria 'idprojects = :idprojects'.
	 */
	public Projects findByPrimaryKey(int idprojects) throws ProjectsDaoException;

	/** 
	 * Returns all rows from the projects table that match the criteria ''.
	 */
	public Projects[] findAll() throws ProjectsDaoException;

	/** 
	 * Returns all rows from the projects table that match the criteria 'company_id = :companyId'.
	 */
	public Projects[] findByBusinessPartner(int companyId) throws ProjectsDaoException;

	/** 
	 * Returns all rows from the projects table that match the criteria 'branch_id = :branchId'.
	 */
	public Projects[] findByBranches(int branchId) throws ProjectsDaoException;

	/** 
	 * Returns all rows from the projects table that match the criteria 'status = :status'.
	 */
	public Projects[] findByWorkingStatus(int status) throws ProjectsDaoException;

	/** 
	 * Returns all rows from the projects table that match the criteria 'type = :type'.
	 */
	public Projects[] findByProjectType(int type) throws ProjectsDaoException;

	/** 
	 * Returns all rows from the projects table that match the criteria 'idprojects = :idprojects'.
	 */
	public Projects[] findWhereIdprojectsEquals(int idprojects) throws ProjectsDaoException;

	/** 
	 * Returns all rows from the projects table that match the criteria 'name = :name'.
	 */
	public Projects[] findWhereNameEquals(String name) throws ProjectsDaoException;

	/** 
	 * Returns all rows from the projects table that match the criteria 'description = :description'.
	 */
	public Projects[] findWhereDescriptionEquals(String description) throws ProjectsDaoException;

	/** 
	 * Returns all rows from the projects table that match the criteria 'start_date = :startDate'.
	 */
	public Projects[] findWhereStartDateEquals(Date startDate) throws ProjectsDaoException;

	/** 
	 * Returns all rows from the projects table that match the criteria 'end_date = :endDate'.
	 */
	public Projects[] findWhereEndDateEquals(Date endDate) throws ProjectsDaoException;

	/** 
	 * Returns all rows from the projects table that match the criteria 'status = :status'.
	 */
	public Projects[] findWhereStatusEquals(int status) throws ProjectsDaoException;

	/** 
	 * Returns all rows from the projects table that match the criteria 'type = :type'.
	 */
	public Projects[] findWhereTypeEquals(int type) throws ProjectsDaoException;

	/** 
	 * Returns all rows from the projects table that match the criteria 'company_id = :companyId'.
	 */
	public Projects[] findWhereCompanyIdEquals(int companyId) throws ProjectsDaoException;

	/** 
	 * Returns all rows from the projects table that match the criteria 'branch_id = :branchId'.
	 */
	public Projects[] findWhereBranchIdEquals(int branchId) throws ProjectsDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the projects table that match the specified arbitrary SQL statement
	 */
	public Projects[] findByDynamicSelect(String sql, Object[] sqlParams) throws ProjectsDaoException;

	/** 
	 * Returns all rows from the projects table that match the specified arbitrary SQL statement
	 */
	public Projects[] findByDynamicWhere(String sql, Object[] sqlParams) throws ProjectsDaoException;

}
