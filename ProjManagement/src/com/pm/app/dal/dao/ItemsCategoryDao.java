/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.pm.app.dal.dao;

import com.pm.app.dal.dto.*;
import com.pm.app.dal.exceptions.*;

public interface ItemsCategoryDao
{
	/** 
	 * Inserts a new row in the items_category table.
	 */
	public ItemsCategoryPk insert(ItemsCategory dto) throws ItemsCategoryDaoException;

	/** 
	 * Updates a single row in the items_category table.
	 */
	public void update(ItemsCategoryPk pk, ItemsCategory dto) throws ItemsCategoryDaoException;

	/** 
	 * Deletes a single row in the items_category table.
	 */
	public void delete(ItemsCategoryPk pk) throws ItemsCategoryDaoException;

	/** 
	 * Returns the rows from the items_category table that matches the specified primary-key value.
	 */
	public ItemsCategory findByPrimaryKey(ItemsCategoryPk pk) throws ItemsCategoryDaoException;

	/** 
	 * Returns all rows from the items_category table that match the criteria 'id = :id'.
	 */
	public ItemsCategory findByPrimaryKey(int id) throws ItemsCategoryDaoException;

	/** 
	 * Returns all rows from the items_category table that match the criteria ''.
	 */
	public ItemsCategory[] findAll() throws ItemsCategoryDaoException;

	/** 
	 * Returns all rows from the items_category table that match the criteria 'branch_id = :branchId'.
	 */
	public ItemsCategory[] findByBranches(int branchId) throws ItemsCategoryDaoException;

	/** 
	 * Returns all rows from the items_category table that match the criteria 'id = :id'.
	 */
	public ItemsCategory[] findWhereIdEquals(int id) throws ItemsCategoryDaoException;

	/** 
	 * Returns all rows from the items_category table that match the criteria 'name = :name'.
	 */
	public ItemsCategory[] findWhereNameEquals(String name) throws ItemsCategoryDaoException;

	/** 
	 * Returns all rows from the items_category table that match the criteria 'branch_id = :branchId'.
	 */
	public ItemsCategory[] findWhereBranchIdEquals(int branchId) throws ItemsCategoryDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the items_category table that match the specified arbitrary SQL statement
	 */
	public ItemsCategory[] findByDynamicSelect(String sql, Object[] sqlParams) throws ItemsCategoryDaoException;

	/** 
	 * Returns all rows from the items_category table that match the specified arbitrary SQL statement
	 */
	public ItemsCategory[] findByDynamicWhere(String sql, Object[] sqlParams) throws ItemsCategoryDaoException;

}
