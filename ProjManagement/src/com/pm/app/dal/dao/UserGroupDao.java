/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.pm.app.dal.dao;

import com.pm.app.dal.dto.*;
import com.pm.app.dal.exceptions.*;

public interface UserGroupDao
{
	/** 
	 * Inserts a new row in the user_group table.
	 */
	public UserGroupPk insert(UserGroup dto) throws UserGroupDaoException;

	/** 
	 * Updates a single row in the user_group table.
	 */
	public void update(UserGroupPk pk, UserGroup dto) throws UserGroupDaoException;

	/** 
	 * Deletes a single row in the user_group table.
	 */
	public void delete(UserGroupPk pk) throws UserGroupDaoException;

	/** 
	 * Returns the rows from the user_group table that matches the specified primary-key value.
	 */
	public UserGroup findByPrimaryKey(UserGroupPk pk) throws UserGroupDaoException;

	/** 
	 * Returns all rows from the user_group table that match the criteria 'iduser_group = :iduserGroup'.
	 */
	public UserGroup findByPrimaryKey(int iduserGroup) throws UserGroupDaoException;

	/** 
	 * Returns all rows from the user_group table that match the criteria ''.
	 */
	public UserGroup[] findAll() throws UserGroupDaoException;

	/** 
	 * Returns all rows from the user_group table that match the criteria 'branch_id = :branchId'.
	 */
	public UserGroup[] findByBranches(int branchId) throws UserGroupDaoException;

	/** 
	 * Returns all rows from the user_group table that match the criteria 'iduser_group = :iduserGroup'.
	 */
	public UserGroup[] findWhereIduserGroupEquals(int iduserGroup) throws UserGroupDaoException;

	/** 
	 * Returns all rows from the user_group table that match the criteria 'name = :name'.
	 */
	public UserGroup[] findWhereNameEquals(String name) throws UserGroupDaoException;

	/** 
	 * Returns all rows from the user_group table that match the criteria 'branch_id = :branchId'.
	 */
	public UserGroup[] findWhereBranchIdEquals(int branchId) throws UserGroupDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the user_group table that match the specified arbitrary SQL statement
	 */
	public UserGroup[] findByDynamicSelect(String sql, Object[] sqlParams) throws UserGroupDaoException;

	/** 
	 * Returns all rows from the user_group table that match the specified arbitrary SQL statement
	 */
	public UserGroup[] findByDynamicWhere(String sql, Object[] sqlParams) throws UserGroupDaoException;

}
