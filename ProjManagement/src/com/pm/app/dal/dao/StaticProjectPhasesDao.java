/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.pm.app.dal.dao;

import com.pm.app.dal.dto.*;
import com.pm.app.dal.exceptions.*;

public interface StaticProjectPhasesDao
{
	/** 
	 * Inserts a new row in the static_project_phases table.
	 */
	public StaticProjectPhasesPk insert(StaticProjectPhases dto) throws StaticProjectPhasesDaoException;

	/** 
	 * Updates a single row in the static_project_phases table.
	 */
	public void update(StaticProjectPhasesPk pk, StaticProjectPhases dto) throws StaticProjectPhasesDaoException;

	/** 
	 * Deletes a single row in the static_project_phases table.
	 */
	public void delete(StaticProjectPhasesPk pk) throws StaticProjectPhasesDaoException;

	/** 
	 * Returns the rows from the static_project_phases table that matches the specified primary-key value.
	 */
	public StaticProjectPhases findByPrimaryKey(StaticProjectPhasesPk pk) throws StaticProjectPhasesDaoException;

	/** 
	 * Returns all rows from the static_project_phases table that match the criteria 'idstatic_project_phases = :idstaticProjectPhases'.
	 */
	public StaticProjectPhases findByPrimaryKey(int idstaticProjectPhases) throws StaticProjectPhasesDaoException;

	/** 
	 * Returns all rows from the static_project_phases table that match the criteria ''.
	 */
	public StaticProjectPhases[] findAll() throws StaticProjectPhasesDaoException;

	/** 
	 * Returns all rows from the static_project_phases table that match the criteria 'type = :type'.
	 */
	public StaticProjectPhases[] findByProjectType(int type) throws StaticProjectPhasesDaoException;

	/** 
	 * Returns all rows from the static_project_phases table that match the criteria 'idstatic_project_phases = :idstaticProjectPhases'.
	 */
	public StaticProjectPhases[] findWhereIdstaticProjectPhasesEquals(int idstaticProjectPhases) throws StaticProjectPhasesDaoException;

	/** 
	 * Returns all rows from the static_project_phases table that match the criteria 'name = :name'.
	 */
	public StaticProjectPhases[] findWhereNameEquals(String name) throws StaticProjectPhasesDaoException;

	/** 
	 * Returns all rows from the static_project_phases table that match the criteria 'description = :description'.
	 */
	public StaticProjectPhases[] findWhereDescriptionEquals(String description) throws StaticProjectPhasesDaoException;

	/** 
	 * Returns all rows from the static_project_phases table that match the criteria 'type = :type'.
	 */
	public StaticProjectPhases[] findWhereTypeEquals(int type) throws StaticProjectPhasesDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the static_project_phases table that match the specified arbitrary SQL statement
	 */
	public StaticProjectPhases[] findByDynamicSelect(String sql, Object[] sqlParams) throws StaticProjectPhasesDaoException;

	/** 
	 * Returns all rows from the static_project_phases table that match the specified arbitrary SQL statement
	 */
	public StaticProjectPhases[] findByDynamicWhere(String sql, Object[] sqlParams) throws StaticProjectPhasesDaoException;

}
