/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.pm.app.dal.dao;

import java.util.Date;
import com.pm.app.dal.dto.*;
import com.pm.app.dal.exceptions.*;

public interface InvoicesDao
{
	/** 
	 * Inserts a new row in the invoices table.
	 */
	public InvoicesPk insert(Invoices dto) throws InvoicesDaoException;

	/** 
	 * Updates a single row in the invoices table.
	 */
	public void update(InvoicesPk pk, Invoices dto) throws InvoicesDaoException;

	/** 
	 * Deletes a single row in the invoices table.
	 */
	public void delete(InvoicesPk pk) throws InvoicesDaoException;

	/** 
	 * Returns the rows from the invoices table that matches the specified primary-key value.
	 */
	public Invoices findByPrimaryKey(InvoicesPk pk) throws InvoicesDaoException;

	/** 
	 * Returns all rows from the invoices table that match the criteria 'idinvoice = :idinvoice'.
	 */
	public Invoices findByPrimaryKey(int idinvoice) throws InvoicesDaoException;

	/** 
	 * Returns all rows from the invoices table that match the criteria ''.
	 */
	public Invoices[] findAll() throws InvoicesDaoException;

	/** 
	 * Returns all rows from the invoices table that match the criteria 'business_partnet_id = :businessPartnetId'.
	 */
	public Invoices[] findByBusinessPartner(int businessPartnetId) throws InvoicesDaoException;

	/** 
	 * Returns all rows from the invoices table that match the criteria 'branch_id = :branchId'.
	 */
	public Invoices[] findByBranches(int branchId) throws InvoicesDaoException;

	/** 
	 * Returns all rows from the invoices table that match the criteria 'project_id = :projectId'.
	 */
	public Invoices[] findByProjects(int projectId) throws InvoicesDaoException;

	/** 
	 * Returns all rows from the invoices table that match the criteria 'idinvoice = :idinvoice'.
	 */
	public Invoices[] findWhereIdinvoiceEquals(int idinvoice) throws InvoicesDaoException;

	/** 
	 * Returns all rows from the invoices table that match the criteria 'invoice_date = :invoiceDate'.
	 */
	public Invoices[] findWhereInvoiceDateEquals(Date invoiceDate) throws InvoicesDaoException;

	/** 
	 * Returns all rows from the invoices table that match the criteria 'isTrx = :isTrx'.
	 */
	public Invoices[] findWhereIsTrxEquals(int isTrx) throws InvoicesDaoException;

	/** 
	 * Returns all rows from the invoices table that match the criteria 'valid_to = :validTo'.
	 */
	public Invoices[] findWhereValidToEquals(Date validTo) throws InvoicesDaoException;

	/** 
	 * Returns all rows from the invoices table that match the criteria 'business_partnet_id = :businessPartnetId'.
	 */
	public Invoices[] findWhereBusinessPartnetIdEquals(int businessPartnetId) throws InvoicesDaoException;

	/** 
	 * Returns all rows from the invoices table that match the criteria 'tax = :tax'.
	 */
	public Invoices[] findWhereTaxEquals(double tax) throws InvoicesDaoException;

	/** 
	 * Returns all rows from the invoices table that match the criteria 'sub_total = :subTotal'.
	 */
	public Invoices[] findWhereSubTotalEquals(double subTotal) throws InvoicesDaoException;

	/** 
	 * Returns all rows from the invoices table that match the criteria 'grand_total = :grandTotal'.
	 */
	public Invoices[] findWhereGrandTotalEquals(double grandTotal) throws InvoicesDaoException;

	/** 
	 * Returns all rows from the invoices table that match the criteria 'project_id = :projectId'.
	 */
	public Invoices[] findWhereProjectIdEquals(int projectId) throws InvoicesDaoException;

	/** 
	 * Returns all rows from the invoices table that match the criteria 'branch_id = :branchId'.
	 */
	public Invoices[] findWhereBranchIdEquals(int branchId) throws InvoicesDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the invoices table that match the specified arbitrary SQL statement
	 */
	public Invoices[] findByDynamicSelect(String sql, Object[] sqlParams) throws InvoicesDaoException;

	/** 
	 * Returns all rows from the invoices table that match the specified arbitrary SQL statement
	 */
	public Invoices[] findByDynamicWhere(String sql, Object[] sqlParams) throws InvoicesDaoException;

}
