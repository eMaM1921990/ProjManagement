/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.pm.app.dal.jdbc;

import com.pm.app.dal.dao.*;
import com.pm.app.dal.factory.*;
import java.util.Date;
import com.pm.app.dal.dto.*;
import com.pm.app.dal.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class QuotesDaoImpl extends AbstractDAO implements QuotesDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT idquotes, quote_date, isTrx, valid_to, business_partnet_id, tax, sub_total, grand_total, project_id, branch_id FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( idquotes, quote_date, isTrx, valid_to, business_partnet_id, tax, sub_total, grand_total, project_id, branch_id ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET idquotes = ?, quote_date = ?, isTrx = ?, valid_to = ?, business_partnet_id = ?, tax = ?, sub_total = ?, grand_total = ?, project_id = ?, branch_id = ? WHERE idquotes = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE idquotes = ?";

	/** 
	 * Index of column idquotes
	 */
	protected static final int COLUMN_IDQUOTES = 1;

	/** 
	 * Index of column quote_date
	 */
	protected static final int COLUMN_QUOTE_DATE = 2;

	/** 
	 * Index of column isTrx
	 */
	protected static final int COLUMN_IS_TRX = 3;

	/** 
	 * Index of column valid_to
	 */
	protected static final int COLUMN_VALID_TO = 4;

	/** 
	 * Index of column business_partnet_id
	 */
	protected static final int COLUMN_BUSINESS_PARTNET_ID = 5;

	/** 
	 * Index of column tax
	 */
	protected static final int COLUMN_TAX = 6;

	/** 
	 * Index of column sub_total
	 */
	protected static final int COLUMN_SUB_TOTAL = 7;

	/** 
	 * Index of column grand_total
	 */
	protected static final int COLUMN_GRAND_TOTAL = 8;

	/** 
	 * Index of column project_id
	 */
	protected static final int COLUMN_PROJECT_ID = 9;

	/** 
	 * Index of column branch_id
	 */
	protected static final int COLUMN_BRANCH_ID = 10;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 10;

	/** 
	 * Index of primary-key column idquotes
	 */
	protected static final int PK_COLUMN_IDQUOTES = 1;

	/** 
	 * Inserts a new row in the quotes table.
	 */
	public QuotesPk insert(Quotes dto) throws QuotesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getIdquotes() );
			stmt.setDate(index++, dto.getQuoteDate()==null ? null : new java.sql.Date( dto.getQuoteDate().getTime() ) );
			if (dto.isIsTrxNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getIsTrx() );
			}
		
			stmt.setDate(index++, dto.getValidTo()==null ? null : new java.sql.Date( dto.getValidTo().getTime() ) );
			if (dto.isBusinessPartnetIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getBusinessPartnetId() );
			}
		
			if (dto.isTaxNull()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getTax() );
			}
		
			if (dto.isSubTotalNull()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getSubTotal() );
			}
		
			if (dto.isGrandTotalNull()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getGrandTotal() );
			}
		
			if (dto.isProjectIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getProjectId() );
			}
		
			if (dto.isBranchIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getBranchId() );
			}
		
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdquotes( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new QuotesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the quotes table.
	 */
	public void update(QuotesPk pk, Quotes dto) throws QuotesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getIdquotes() );
			stmt.setDate(index++, dto.getQuoteDate()==null ? null : new java.sql.Date( dto.getQuoteDate().getTime() ) );
			if (dto.isIsTrxNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getIsTrx() );
			}
		
			stmt.setDate(index++, dto.getValidTo()==null ? null : new java.sql.Date( dto.getValidTo().getTime() ) );
			if (dto.isBusinessPartnetIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getBusinessPartnetId() );
			}
		
			if (dto.isTaxNull()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getTax() );
			}
		
			if (dto.isSubTotalNull()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getSubTotal() );
			}
		
			if (dto.isGrandTotalNull()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getGrandTotal() );
			}
		
			if (dto.isProjectIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getProjectId() );
			}
		
			if (dto.isBranchIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getBranchId() );
			}
		
			stmt.setInt( 11, pk.getIdquotes() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new QuotesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the quotes table.
	 */
	public void delete(QuotesPk pk) throws QuotesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdquotes() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new QuotesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the quotes table that matches the specified primary-key value.
	 */
	public Quotes findByPrimaryKey(QuotesPk pk) throws QuotesDaoException
	{
		return findByPrimaryKey( pk.getIdquotes() );
	}

	/** 
	 * Returns all rows from the quotes table that match the criteria 'idquotes = :idquotes'.
	 */
	public Quotes findByPrimaryKey(int idquotes) throws QuotesDaoException
	{
		Quotes ret[] = findByDynamicSelect( SQL_SELECT + " WHERE idquotes = ?", new Object[] {  new Integer(idquotes) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the quotes table that match the criteria ''.
	 */
	public Quotes[] findAll() throws QuotesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY idquotes", null );
	}

	/** 
	 * Returns all rows from the quotes table that match the criteria 'business_partnet_id = :businessPartnetId'.
	 */
	public Quotes[] findByBusinessPartner(int businessPartnetId) throws QuotesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE business_partnet_id = ?", new Object[] {  new Integer(businessPartnetId) } );
	}

	/** 
	 * Returns all rows from the quotes table that match the criteria 'project_id = :projectId'.
	 */
	public Quotes[] findByProjects(int projectId) throws QuotesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE project_id = ?", new Object[] {  new Integer(projectId) } );
	}

	/** 
	 * Returns all rows from the quotes table that match the criteria 'branch_id = :branchId'.
	 */
	public Quotes[] findByBranches(int branchId) throws QuotesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE branch_id = ?", new Object[] {  new Integer(branchId) } );
	}

	/** 
	 * Returns all rows from the quotes table that match the criteria 'idquotes = :idquotes'.
	 */
	public Quotes[] findWhereIdquotesEquals(int idquotes) throws QuotesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE idquotes = ? ORDER BY idquotes", new Object[] {  new Integer(idquotes) } );
	}

	/** 
	 * Returns all rows from the quotes table that match the criteria 'quote_date = :quoteDate'.
	 */
	public Quotes[] findWhereQuoteDateEquals(Date quoteDate) throws QuotesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE quote_date = ? ORDER BY quote_date", new Object[] { quoteDate==null ? null : new java.sql.Date( quoteDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the quotes table that match the criteria 'isTrx = :isTrx'.
	 */
	public Quotes[] findWhereIsTrxEquals(int isTrx) throws QuotesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE isTrx = ? ORDER BY isTrx", new Object[] {  new Integer(isTrx) } );
	}

	/** 
	 * Returns all rows from the quotes table that match the criteria 'valid_to = :validTo'.
	 */
	public Quotes[] findWhereValidToEquals(Date validTo) throws QuotesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE valid_to = ? ORDER BY valid_to", new Object[] { validTo==null ? null : new java.sql.Date( validTo.getTime() ) } );
	}

	/** 
	 * Returns all rows from the quotes table that match the criteria 'business_partnet_id = :businessPartnetId'.
	 */
	public Quotes[] findWhereBusinessPartnetIdEquals(int businessPartnetId) throws QuotesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE business_partnet_id = ? ORDER BY business_partnet_id", new Object[] {  new Integer(businessPartnetId) } );
	}

	/** 
	 * Returns all rows from the quotes table that match the criteria 'tax = :tax'.
	 */
	public Quotes[] findWhereTaxEquals(double tax) throws QuotesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE tax = ? ORDER BY tax", new Object[] {  new Double(tax) } );
	}

	/** 
	 * Returns all rows from the quotes table that match the criteria 'sub_total = :subTotal'.
	 */
	public Quotes[] findWhereSubTotalEquals(double subTotal) throws QuotesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE sub_total = ? ORDER BY sub_total", new Object[] {  new Double(subTotal) } );
	}

	/** 
	 * Returns all rows from the quotes table that match the criteria 'grand_total = :grandTotal'.
	 */
	public Quotes[] findWhereGrandTotalEquals(double grandTotal) throws QuotesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE grand_total = ? ORDER BY grand_total", new Object[] {  new Double(grandTotal) } );
	}

	/** 
	 * Returns all rows from the quotes table that match the criteria 'project_id = :projectId'.
	 */
	public Quotes[] findWhereProjectIdEquals(int projectId) throws QuotesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE project_id = ? ORDER BY project_id", new Object[] {  new Integer(projectId) } );
	}

	/** 
	 * Returns all rows from the quotes table that match the criteria 'branch_id = :branchId'.
	 */
	public Quotes[] findWhereBranchIdEquals(int branchId) throws QuotesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE branch_id = ? ORDER BY branch_id", new Object[] {  new Integer(branchId) } );
	}

	/**
	 * Method 'QuotesDaoImpl'
	 * 
	 */
	public QuotesDaoImpl()
	{
	}

	/**
	 * Method 'QuotesDaoImpl'
	 * 
	 * @param userConn
	 */
	public QuotesDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "constructions_web.quotes";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Quotes fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Quotes dto = new Quotes();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Quotes[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Quotes dto = new Quotes();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Quotes ret[] = new Quotes[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Quotes dto, ResultSet rs) throws SQLException
	{
		dto.setIdquotes( rs.getInt( COLUMN_IDQUOTES ) );
		dto.setQuoteDate( rs.getDate(COLUMN_QUOTE_DATE ) );
		dto.setIsTrx( rs.getInt( COLUMN_IS_TRX ) );
		if (rs.wasNull()) {
			dto.setIsTrxNull( true );
		}
		
		dto.setValidTo( rs.getDate(COLUMN_VALID_TO ) );
		dto.setBusinessPartnetId( rs.getInt( COLUMN_BUSINESS_PARTNET_ID ) );
		if (rs.wasNull()) {
			dto.setBusinessPartnetIdNull( true );
		}
		
		dto.setTax( rs.getDouble( COLUMN_TAX ) );
		if (rs.wasNull()) {
			dto.setTaxNull( true );
		}
		
		dto.setSubTotal( rs.getDouble( COLUMN_SUB_TOTAL ) );
		if (rs.wasNull()) {
			dto.setSubTotalNull( true );
		}
		
		dto.setGrandTotal( rs.getDouble( COLUMN_GRAND_TOTAL ) );
		if (rs.wasNull()) {
			dto.setGrandTotalNull( true );
		}
		
		dto.setProjectId( rs.getInt( COLUMN_PROJECT_ID ) );
		if (rs.wasNull()) {
			dto.setProjectIdNull( true );
		}
		
		dto.setBranchId( rs.getInt( COLUMN_BRANCH_ID ) );
		if (rs.wasNull()) {
			dto.setBranchIdNull( true );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Quotes dto)
	{
	}

	/** 
	 * Returns all rows from the quotes table that match the specified arbitrary SQL statement
	 */
	public Quotes[] findByDynamicSelect(String sql, Object[] sqlParams) throws QuotesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new QuotesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the quotes table that match the specified arbitrary SQL statement
	 */
	public Quotes[] findByDynamicWhere(String sql, Object[] sqlParams) throws QuotesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new QuotesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
