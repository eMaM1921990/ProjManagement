/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.pm.app.dal.jdbc;

import com.pm.app.dal.dao.*;
import com.pm.app.dal.factory.*;
import java.util.Date;
import com.pm.app.dal.dto.*;
import com.pm.app.dal.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ProjectPhasesDaoImpl extends AbstractDAO implements ProjectPhasesDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT idproject_phases, name, description, start_date, end_date, status, project_id FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( idproject_phases, name, description, start_date, end_date, status, project_id ) VALUES ( ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET idproject_phases = ?, name = ?, description = ?, start_date = ?, end_date = ?, status = ?, project_id = ? WHERE idproject_phases = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE idproject_phases = ?";

	/** 
	 * Index of column idproject_phases
	 */
	protected static final int COLUMN_IDPROJECT_PHASES = 1;

	/** 
	 * Index of column name
	 */
	protected static final int COLUMN_NAME = 2;

	/** 
	 * Index of column description
	 */
	protected static final int COLUMN_DESCRIPTION = 3;

	/** 
	 * Index of column start_date
	 */
	protected static final int COLUMN_START_DATE = 4;

	/** 
	 * Index of column end_date
	 */
	protected static final int COLUMN_END_DATE = 5;

	/** 
	 * Index of column status
	 */
	protected static final int COLUMN_STATUS = 6;

	/** 
	 * Index of column project_id
	 */
	protected static final int COLUMN_PROJECT_ID = 7;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 7;

	/** 
	 * Index of primary-key column idproject_phases
	 */
	protected static final int PK_COLUMN_IDPROJECT_PHASES = 1;

	/** 
	 * Inserts a new row in the project_phases table.
	 */
	public ProjectPhasesPk insert(ProjectPhases dto) throws ProjectPhasesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getIdprojectPhases() );
			stmt.setString( index++, dto.getName() );
			stmt.setString( index++, dto.getDescription() );
			stmt.setDate(index++, dto.getStartDate()==null ? null : new java.sql.Date( dto.getStartDate().getTime() ) );
			stmt.setDate(index++, dto.getEndDate()==null ? null : new java.sql.Date( dto.getEndDate().getTime() ) );
			if (dto.isStatusNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getStatus() );
			}
		
			if (dto.isProjectIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getProjectId() );
			}
		
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdprojectPhases( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProjectPhasesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the project_phases table.
	 */
	public void update(ProjectPhasesPk pk, ProjectPhases dto) throws ProjectPhasesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getIdprojectPhases() );
			stmt.setString( index++, dto.getName() );
			stmt.setString( index++, dto.getDescription() );
			stmt.setDate(index++, dto.getStartDate()==null ? null : new java.sql.Date( dto.getStartDate().getTime() ) );
			stmt.setDate(index++, dto.getEndDate()==null ? null : new java.sql.Date( dto.getEndDate().getTime() ) );
			if (dto.isStatusNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getStatus() );
			}
		
			if (dto.isProjectIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getProjectId() );
			}
		
			stmt.setInt( 8, pk.getIdprojectPhases() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProjectPhasesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the project_phases table.
	 */
	public void delete(ProjectPhasesPk pk) throws ProjectPhasesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdprojectPhases() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProjectPhasesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the project_phases table that matches the specified primary-key value.
	 */
	public ProjectPhases findByPrimaryKey(ProjectPhasesPk pk) throws ProjectPhasesDaoException
	{
		return findByPrimaryKey( pk.getIdprojectPhases() );
	}

	/** 
	 * Returns all rows from the project_phases table that match the criteria 'idproject_phases = :idprojectPhases'.
	 */
	public ProjectPhases findByPrimaryKey(int idprojectPhases) throws ProjectPhasesDaoException
	{
		ProjectPhases ret[] = findByDynamicSelect( SQL_SELECT + " WHERE idproject_phases = ?", new Object[] {  new Integer(idprojectPhases) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the project_phases table that match the criteria ''.
	 */
	public ProjectPhases[] findAll() throws ProjectPhasesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY idproject_phases", null );
	}

	/** 
	 * Returns all rows from the project_phases table that match the criteria 'project_id = :projectId'.
	 */
	public ProjectPhases[] findByProjects(int projectId) throws ProjectPhasesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE project_id = ?", new Object[] {  new Integer(projectId) } );
	}

	/** 
	 * Returns all rows from the project_phases table that match the criteria 'status = :status'.
	 */
	public ProjectPhases[] findByWorkingStatus(int status) throws ProjectPhasesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE status = ?", new Object[] {  new Integer(status) } );
	}

	/** 
	 * Returns all rows from the project_phases table that match the criteria 'idproject_phases = :idprojectPhases'.
	 */
	public ProjectPhases[] findWhereIdprojectPhasesEquals(int idprojectPhases) throws ProjectPhasesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE idproject_phases = ? ORDER BY idproject_phases", new Object[] {  new Integer(idprojectPhases) } );
	}

	/** 
	 * Returns all rows from the project_phases table that match the criteria 'name = :name'.
	 */
	public ProjectPhases[] findWhereNameEquals(String name) throws ProjectPhasesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE name = ? ORDER BY name", new Object[] { name } );
	}

	/** 
	 * Returns all rows from the project_phases table that match the criteria 'description = :description'.
	 */
	public ProjectPhases[] findWhereDescriptionEquals(String description) throws ProjectPhasesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE description = ? ORDER BY description", new Object[] { description } );
	}

	/** 
	 * Returns all rows from the project_phases table that match the criteria 'start_date = :startDate'.
	 */
	public ProjectPhases[] findWhereStartDateEquals(Date startDate) throws ProjectPhasesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE start_date = ? ORDER BY start_date", new Object[] { startDate==null ? null : new java.sql.Date( startDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the project_phases table that match the criteria 'end_date = :endDate'.
	 */
	public ProjectPhases[] findWhereEndDateEquals(Date endDate) throws ProjectPhasesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE end_date = ? ORDER BY end_date", new Object[] { endDate==null ? null : new java.sql.Date( endDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the project_phases table that match the criteria 'status = :status'.
	 */
	public ProjectPhases[] findWhereStatusEquals(int status) throws ProjectPhasesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE status = ? ORDER BY status", new Object[] {  new Integer(status) } );
	}

	/** 
	 * Returns all rows from the project_phases table that match the criteria 'project_id = :projectId'.
	 */
	public ProjectPhases[] findWhereProjectIdEquals(int projectId) throws ProjectPhasesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE project_id = ? ORDER BY project_id", new Object[] {  new Integer(projectId) } );
	}

	/**
	 * Method 'ProjectPhasesDaoImpl'
	 * 
	 */
	public ProjectPhasesDaoImpl()
	{
	}

	/**
	 * Method 'ProjectPhasesDaoImpl'
	 * 
	 * @param userConn
	 */
	public ProjectPhasesDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "constructions_web.project_phases";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ProjectPhases fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ProjectPhases dto = new ProjectPhases();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ProjectPhases[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ProjectPhases dto = new ProjectPhases();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ProjectPhases ret[] = new ProjectPhases[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ProjectPhases dto, ResultSet rs) throws SQLException
	{
		dto.setIdprojectPhases( rs.getInt( COLUMN_IDPROJECT_PHASES ) );
		dto.setName( rs.getString( COLUMN_NAME ) );
		dto.setDescription( rs.getString( COLUMN_DESCRIPTION ) );
		dto.setStartDate( rs.getDate(COLUMN_START_DATE ) );
		dto.setEndDate( rs.getDate(COLUMN_END_DATE ) );
		dto.setStatus( rs.getInt( COLUMN_STATUS ) );
		if (rs.wasNull()) {
			dto.setStatusNull( true );
		}
		
		dto.setProjectId( rs.getInt( COLUMN_PROJECT_ID ) );
		if (rs.wasNull()) {
			dto.setProjectIdNull( true );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(ProjectPhases dto)
	{
	}

	/** 
	 * Returns all rows from the project_phases table that match the specified arbitrary SQL statement
	 */
	public ProjectPhases[] findByDynamicSelect(String sql, Object[] sqlParams) throws ProjectPhasesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProjectPhasesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the project_phases table that match the specified arbitrary SQL statement
	 */
	public ProjectPhases[] findByDynamicWhere(String sql, Object[] sqlParams) throws ProjectPhasesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ProjectPhasesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
