/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.pm.app.dal.jdbc;

import com.pm.app.dal.dao.*;
import com.pm.app.dal.factory.*;
import com.pm.app.dal.dto.*;
import com.pm.app.dal.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class SysusersDaoImpl extends AbstractDAO implements SysusersDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT idusers, username, password, group_id, iduser_group, name, branch_id FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * Index of column idusers
	 */
	protected static final int COLUMN_IDUSERS = 1;

	/** 
	 * Index of column username
	 */
	protected static final int COLUMN_USERNAME = 2;

	/** 
	 * Index of column password
	 */
	protected static final int COLUMN_PASSWORD = 3;

	/** 
	 * Index of column group_id
	 */
	protected static final int COLUMN_GROUP_ID = 4;

	/** 
	 * Index of column iduser_group
	 */
	protected static final int COLUMN_IDUSER_GROUP = 5;

	/** 
	 * Index of column name
	 */
	protected static final int COLUMN_NAME = 6;

	/** 
	 * Index of column branch_id
	 */
	protected static final int COLUMN_BRANCH_ID = 7;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 7;

	/** 
	 * Returns all rows from the sysusers table that match the criteria ''.
	 */
	public Sysusers[] findAll() throws SysusersDaoException
	{
		return findByDynamicSelect( SQL_SELECT, null );
	}

	/** 
	 * Returns all rows from the sysusers table that match the criteria 'idusers = :idusers'.
	 */
	public Sysusers[] findWhereIdusersEquals(int idusers) throws SysusersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE idusers = ? ORDER BY idusers", new Object[] {  new Integer(idusers) } );
	}

	/** 
	 * Returns all rows from the sysusers table that match the criteria 'username = :username'.
	 */
	public Sysusers[] findWhereUsernameEquals(String username) throws SysusersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE username = ? ORDER BY username", new Object[] { username } );
	}

	/** 
	 * Returns all rows from the sysusers table that match the criteria 'password = :password'.
	 */
	public Sysusers[] findWherePasswordEquals(String password) throws SysusersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE password = ? ORDER BY password", new Object[] { password } );
	}

	/** 
	 * Returns all rows from the sysusers table that match the criteria 'group_id = :groupId'.
	 */
	public Sysusers[] findWhereGroupIdEquals(int groupId) throws SysusersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE group_id = ? ORDER BY group_id", new Object[] {  new Integer(groupId) } );
	}

	/** 
	 * Returns all rows from the sysusers table that match the criteria 'iduser_group = :iduserGroup'.
	 */
	public Sysusers[] findWhereIduserGroupEquals(int iduserGroup) throws SysusersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE iduser_group = ? ORDER BY iduser_group", new Object[] {  new Integer(iduserGroup) } );
	}

	/** 
	 * Returns all rows from the sysusers table that match the criteria 'name = :name'.
	 */
	public Sysusers[] findWhereNameEquals(String name) throws SysusersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE name = ? ORDER BY name", new Object[] { name } );
	}

	/** 
	 * Returns all rows from the sysusers table that match the criteria 'branch_id = :branchId'.
	 */
	public Sysusers[] findWhereBranchIdEquals(int branchId) throws SysusersDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE branch_id = ? ORDER BY branch_id", new Object[] {  new Integer(branchId) } );
	}

	/**
	 * Method 'SysusersDaoImpl'
	 * 
	 */
	public SysusersDaoImpl()
	{
	}

	/**
	 * Method 'SysusersDaoImpl'
	 * 
	 * @param userConn
	 */
	public SysusersDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "constructions_web.sysusers";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Sysusers fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Sysusers dto = new Sysusers();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Sysusers[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Sysusers dto = new Sysusers();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Sysusers ret[] = new Sysusers[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Sysusers dto, ResultSet rs) throws SQLException
	{
		dto.setIdusers( rs.getInt( COLUMN_IDUSERS ) );
		dto.setUsername( rs.getString( COLUMN_USERNAME ) );
		dto.setPassword( rs.getString( COLUMN_PASSWORD ) );
		dto.setGroupId( rs.getInt( COLUMN_GROUP_ID ) );
		if (rs.wasNull()) {
			dto.setGroupIdNull( true );
		}
		
		dto.setIduserGroup( rs.getInt( COLUMN_IDUSER_GROUP ) );
		dto.setName( rs.getString( COLUMN_NAME ) );
		dto.setBranchId( rs.getInt( COLUMN_BRANCH_ID ) );
		if (rs.wasNull()) {
			dto.setBranchIdNull( true );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Sysusers dto)
	{
	}

	/** 
	 * Returns all rows from the sysusers table that match the specified arbitrary SQL statement
	 */
	public Sysusers[] findByDynamicSelect(String sql, Object[] sqlParams) throws SysusersDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SysusersDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the sysusers table that match the specified arbitrary SQL statement
	 */
	public Sysusers[] findByDynamicWhere(String sql, Object[] sqlParams) throws SysusersDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new SysusersDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
