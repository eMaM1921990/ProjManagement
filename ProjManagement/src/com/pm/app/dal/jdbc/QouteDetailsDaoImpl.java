/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.pm.app.dal.jdbc;

import com.pm.app.dal.dao.*;
import com.pm.app.dal.factory.*;
import com.pm.app.dal.dto.*;
import com.pm.app.dal.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class QouteDetailsDaoImpl extends AbstractDAO implements QouteDetailsDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT idqoute_details, quote_id, item_id, unit_id, price FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( idqoute_details, quote_id, item_id, unit_id, price ) VALUES ( ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET idqoute_details = ?, quote_id = ?, item_id = ?, unit_id = ?, price = ? WHERE idqoute_details = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE idqoute_details = ?";

	/** 
	 * Index of column idqoute_details
	 */
	protected static final int COLUMN_IDQOUTE_DETAILS = 1;

	/** 
	 * Index of column quote_id
	 */
	protected static final int COLUMN_QUOTE_ID = 2;

	/** 
	 * Index of column item_id
	 */
	protected static final int COLUMN_ITEM_ID = 3;

	/** 
	 * Index of column unit_id
	 */
	protected static final int COLUMN_UNIT_ID = 4;

	/** 
	 * Index of column price
	 */
	protected static final int COLUMN_PRICE = 5;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 5;

	/** 
	 * Index of primary-key column idqoute_details
	 */
	protected static final int PK_COLUMN_IDQOUTE_DETAILS = 1;

	/** 
	 * Inserts a new row in the qoute_details table.
	 */
	public QouteDetailsPk insert(QouteDetails dto) throws QouteDetailsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT, Statement.RETURN_GENERATED_KEYS );
			int index = 1;
			stmt.setInt( index++, dto.getIdqouteDetails() );
			if (dto.isQuoteIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getQuoteId() );
			}
		
			if (dto.isItemIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getItemId() );
			}
		
			if (dto.isUnitIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getUnitId() );
			}
		
			if (dto.isPriceNull()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getPrice() );
			}
		
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		
			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdqouteDetails( rs.getInt( 1 ) );
			}
		
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new QouteDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the qoute_details table.
	 */
	public void update(QouteDetailsPk pk, QouteDetails dto) throws QouteDetailsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setInt( index++, dto.getIdqouteDetails() );
			if (dto.isQuoteIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getQuoteId() );
			}
		
			if (dto.isItemIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getItemId() );
			}
		
			if (dto.isUnitIdNull()) {
				stmt.setNull( index++, java.sql.Types.INTEGER );
			} else {
				stmt.setInt( index++, dto.getUnitId() );
			}
		
			if (dto.isPriceNull()) {
				stmt.setNull( index++, java.sql.Types.DOUBLE );
			} else {
				stmt.setDouble( index++, dto.getPrice() );
			}
		
			stmt.setInt( 6, pk.getIdqouteDetails() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new QouteDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the qoute_details table.
	 */
	public void delete(QouteDetailsPk pk) throws QouteDetailsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setInt( 1, pk.getIdqouteDetails() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new QouteDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the qoute_details table that matches the specified primary-key value.
	 */
	public QouteDetails findByPrimaryKey(QouteDetailsPk pk) throws QouteDetailsDaoException
	{
		return findByPrimaryKey( pk.getIdqouteDetails() );
	}

	/** 
	 * Returns all rows from the qoute_details table that match the criteria 'idqoute_details = :idqouteDetails'.
	 */
	public QouteDetails findByPrimaryKey(int idqouteDetails) throws QouteDetailsDaoException
	{
		QouteDetails ret[] = findByDynamicSelect( SQL_SELECT + " WHERE idqoute_details = ?", new Object[] {  new Integer(idqouteDetails) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the qoute_details table that match the criteria ''.
	 */
	public QouteDetails[] findAll() throws QouteDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY idqoute_details", null );
	}

	/** 
	 * Returns all rows from the qoute_details table that match the criteria 'item_id = :itemId'.
	 */
	public QouteDetails[] findByItems(int itemId) throws QouteDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE item_id = ?", new Object[] {  new Integer(itemId) } );
	}

	/** 
	 * Returns all rows from the qoute_details table that match the criteria 'quote_id = :quoteId'.
	 */
	public QouteDetails[] findByQuotes(int quoteId) throws QouteDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE quote_id = ?", new Object[] {  new Integer(quoteId) } );
	}

	/** 
	 * Returns all rows from the qoute_details table that match the criteria 'unit_id = :unitId'.
	 */
	public QouteDetails[] findByUnits(int unitId) throws QouteDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE unit_id = ?", new Object[] {  new Integer(unitId) } );
	}

	/** 
	 * Returns all rows from the qoute_details table that match the criteria 'idqoute_details = :idqouteDetails'.
	 */
	public QouteDetails[] findWhereIdqouteDetailsEquals(int idqouteDetails) throws QouteDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE idqoute_details = ? ORDER BY idqoute_details", new Object[] {  new Integer(idqouteDetails) } );
	}

	/** 
	 * Returns all rows from the qoute_details table that match the criteria 'quote_id = :quoteId'.
	 */
	public QouteDetails[] findWhereQuoteIdEquals(int quoteId) throws QouteDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE quote_id = ? ORDER BY quote_id", new Object[] {  new Integer(quoteId) } );
	}

	/** 
	 * Returns all rows from the qoute_details table that match the criteria 'item_id = :itemId'.
	 */
	public QouteDetails[] findWhereItemIdEquals(int itemId) throws QouteDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE item_id = ? ORDER BY item_id", new Object[] {  new Integer(itemId) } );
	}

	/** 
	 * Returns all rows from the qoute_details table that match the criteria 'unit_id = :unitId'.
	 */
	public QouteDetails[] findWhereUnitIdEquals(int unitId) throws QouteDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE unit_id = ? ORDER BY unit_id", new Object[] {  new Integer(unitId) } );
	}

	/** 
	 * Returns all rows from the qoute_details table that match the criteria 'price = :price'.
	 */
	public QouteDetails[] findWherePriceEquals(double price) throws QouteDetailsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE price = ? ORDER BY price", new Object[] {  new Double(price) } );
	}

	/**
	 * Method 'QouteDetailsDaoImpl'
	 * 
	 */
	public QouteDetailsDaoImpl()
	{
	}

	/**
	 * Method 'QouteDetailsDaoImpl'
	 * 
	 * @param userConn
	 */
	public QouteDetailsDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "constructions_web.qoute_details";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected QouteDetails fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			QouteDetails dto = new QouteDetails();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected QouteDetails[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			QouteDetails dto = new QouteDetails();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		QouteDetails ret[] = new QouteDetails[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(QouteDetails dto, ResultSet rs) throws SQLException
	{
		dto.setIdqouteDetails( rs.getInt( COLUMN_IDQOUTE_DETAILS ) );
		dto.setQuoteId( rs.getInt( COLUMN_QUOTE_ID ) );
		if (rs.wasNull()) {
			dto.setQuoteIdNull( true );
		}
		
		dto.setItemId( rs.getInt( COLUMN_ITEM_ID ) );
		if (rs.wasNull()) {
			dto.setItemIdNull( true );
		}
		
		dto.setUnitId( rs.getInt( COLUMN_UNIT_ID ) );
		if (rs.wasNull()) {
			dto.setUnitIdNull( true );
		}
		
		dto.setPrice( rs.getDouble( COLUMN_PRICE ) );
		if (rs.wasNull()) {
			dto.setPriceNull( true );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(QouteDetails dto)
	{
	}

	/** 
	 * Returns all rows from the qoute_details table that match the specified arbitrary SQL statement
	 */
	public QouteDetails[] findByDynamicSelect(String sql, Object[] sqlParams) throws QouteDetailsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new QouteDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the qoute_details table that match the specified arbitrary SQL statement
	 */
	public QouteDetails[] findByDynamicWhere(String sql, Object[] sqlParams) throws QouteDetailsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new QouteDetailsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
